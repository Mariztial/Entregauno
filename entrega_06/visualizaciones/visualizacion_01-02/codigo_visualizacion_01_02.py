# -*- coding: utf-8 -*-
"""codigo-visualizacion-01-02

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S1c378QGMTxLaoO9TZ-nLHYfAWf-8LSC
"""

import pandas as pd
import plotly.express as px
data = pd.read_csv('BASE DATOS 1.csv')
data.head()

"""Definimos las variables que van a ser necesarias para construir las visualizaciones."""

country_column = 'Country'
type_of_law_column = 'Type of Law'
application_column = 'Application'

"""Tuve que dejar todos los datos de las variables en mayúscula, ya que habían datos en minúscula y otras en mayúscula, y se repetían en las vizualizaciones."""

data[country_column]= data[country_column].str.capitalize()
data[type_of_law_column]= data[type_of_law_column].str.capitalize()
data[application_column]= data[application_column].str.capitalize()
data[type_of_law_column].unique()

"""Visualización 01

Acontinuación, intentamos ordenar los datos correspondientes a la variable de aplicación. Dejamos que los datos que se repiten más de una vez aparezcan, y aquellos que se repiten solo una vez, los agrupamos en la categoría de "Otros".
"""

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd
# data = pd.read_csv('BASE DATOS 1.csv')

# Ajusta el tamaño de la figura
plt.subplots(figsize=(8, 8))

# Crea un DataFrame para el gráfico de mapa de calor
df_2dhist = pd.DataFrame({
    x_label: grp['Type of Law'].value_counts()
    for x_label, grp in data.groupby('Scope')
})

# Crea el mapa de calor usando Seaborn
sns.heatmap(df_2dhist, cmap='viridis')

# Etiqueta del eje x
plt.xlabel('Scope')

# Etiqueta del eje y
_ = plt.ylabel('Type of Law')

# Muestra el gráfico
plt.show()

from matplotlib import pyplot as plt
import seaborn as sns
import pandas as pd

# Descomenta la línea siguiente si estás cargando datos desde un archivo CSV
# data = pd.read_csv('BASE DATOS 1.csv')

# Ajusta el tamaño de la figura
plt.subplots(figsize=(8, 8))

# Crea un DataFrame para el gráfico de mapa de calor
df_2dhist = pd.DataFrame({
    x_label: grp['Type of Law'].value_counts()
    for x_label, grp in data.groupby('Scope')
})

# Crea el mapa de calor usando Seaborn
sns.heatmap(df_2dhist, cmap='Greens')

# Etiqueta del eje x
plt.xlabel('Scope')

# Etiqueta del eje y
_ = plt.ylabel('Type of Law')

# Guarda la imagen como un archivo PNG
plt.savefig('heatmap.png')

# Muestra el gráfico (opcional)
plt.show()

import pandas as pd
import plotly.express as px

# Descomenta la línea siguiente si estás cargando datos desde un archivo CSV
# data = pd.read_csv('BASE DATOS 1.csv')

# Crea un DataFrame para el gráfico de mapa de calor
df_2dhist = pd.DataFrame({
    x_label: grp['Type of Law'].value_counts()
    for x_label, grp in data.groupby('Scope')
}).fillna(0)  # Rellenamos NaN con 0 para que Plotly Express no tenga problemas

# Crea el mapa de calor usando Plotly Express
fig = px.imshow(df_2dhist.values,
                labels=dict(x="Scope", y="Type of Law", color="Count"),
                x=df_2dhist.columns,
                y=df_2dhist.index,
                color_continuous_scale="Blugrn")

# Actualiza el diseño del gráfico
fig.update_layout(title='Heatmap', xaxis_title='Scope', yaxis_title='Type of Law')

# Guarda la imagen como un archivo HTML
fig.write_html('heatmap.html')

"""Visualización_02"""

paises_con_ban["Tipo de ley"] = "Ban"
paises_con_fee["Tipo de ley"] = "Fee"
paises_con_banfee["Tipo de ley"] = "Ban+Fee"

"""Dejé solo la aplicación en el retail, ya que es donde rige la normativa en Chile."""

Retail= data[data["Application"]=="Retail"]
Retail

"""Dejé solo el scope Nacional, ya que es el que rige en Chile, y así puedo compararlo con otros países que estén igual."""

Nacional_previa= Retail[Retail["Jurisdiction"]== Retail["Country"]]
Nacional = Nacional_previa[Nacional_previa["Product Type"]=="Bag"]
Nacional

"""Esta tabla es la que utilicé para ver qué códigos de cada país debía incluir en el mapa."""